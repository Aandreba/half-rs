name: Rust

on: [push, pull_request]

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  RUSTFLAGS: "-D warnings"
  # Disable debuginfo for faster compile
  CARGO_PROFILE_DEV_DEBUG: 0
  CARGO_PROFILE_TEST_DEBUG: 0
  CARGO_PROFILE_BENCH_DEBUG: 0
  CI: 1
  CARGO_MAKE_CI: 1
  CARGO_MAKE_RUN_CHECK_FORMAT: 1
  CARGO_MAKE_RUN_CLIPPY: 1
  CARGO_MAKE_BUILD_BENCH: 1

jobs:
  rust_x86_64:
    name: Rust x86-64
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        rust:
          - stable
          - beta
          - nightly
          - 1.58.1

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.rust }}
        override: true
        components: clippy,rustfmt

    - name: Cache Dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install Cargo Make
      uses: davidB/rust-cargo-make@v1

    - name: cargo-make ci-flow
      uses: actions-rs/cargo@v1
      with:
        command: make
        args: ci-flow
    
  rust_aarch64:
    name: Rust AArch64
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - nightly
          - 1.58.1

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: cargo test
      uses: uraimo/run-on-arch-action@v2
      with:
        arch: aarch64
        distro: ubuntu_latest
        # Don't want to cache stable/nightly images for now or they'll never get updated
        #githubToken: ${{ github.token }}
        env: |
          CARGO_INCREMENTAL: ${{ env.CARGO_INCREMENTAL }}
          CARGO_NET_RETRY: ${{ env.CARGO_NET_RETRY }}
          RUSTUP_MAX_RETRIES: ${{ env.RUSTUP_MAX_RETRIES }}
          CARGO_TERM_COLOR: ${{ env.CARGO_TERM_COLOR }}
          RUST_BACKTRACE: ${{ env.RUST_BACKTRACE }}
          RUSTFLAGS: ${{ env.RUSTFLAGS }}
          CARGO_PROFILE_DEV_DEBUG: ${{ env.CARGO_PROFILE_DEV_DEBUG }}
          CARGO_PROFILE_TEST_DEBUG: ${{ env.CARGO_PROFILE_TEST_DEBUG }}
          
        install: |
          apt-get update -y
          apt-get install -y curl build-essential
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -v -y --profile minimal --default-toolchain ${{ matrix.rust }}
          source $HOME/.cargo/env
        
        dockerRunArgs: |
          --volume "${PWD}:/work" --workdir "/work"
      
        run: |
          cargo -v test ${{ matrix.rust == 'nightly' && '-all-features' || '--features=std,serde,num-traits,bytemuck,zerocopy'}} --locked -- --nocapture
          cargo -v test --no-default-features --locked -- --nocapture

  miri:
    name: Miri
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: miri
      - name: Run Miri
        uses: actions-rs/cargo@v1
        with:
          command: miri
          args: test
        env:
          MIRIFLAGS: -Zmiri-strict-provenance
